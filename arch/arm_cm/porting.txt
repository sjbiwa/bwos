Cortex-M0/M3/M4への実装に関する考察

・BWOSでは、システムコールの処理中に再スケジューリングを行い、処理が完了した後
  リターンする前にディスパッチを行っている。その後条件が成立してREADY状態に
  復帰したらディスパッチを呼び出したところに戻ってきてシステムコールから復帰する
  という流れである。
  この機構はよく用いられる気候ではあるが、Crotex-Mが持つ「PendSVC」との相性が
  よくない。PendSVCはシステムコール内でディスパッチが必要となった時点で設定して
  おき、システムコールから復帰する際に ハンドラモード->スレッドモード に移行する
  ことを利用して割り込みを発生させてディスパッチするのが狙いだと考える。
  このため、Cortex-M用に新たにOSコードを作成することも考えたが、それは止める。
  つまり、「ディスパッチにPendSVCは使わない。」

・Cortex-M向けではシステムコール呼び出しにSVCは使わず直接関数を呼び出す方法を
　採用する。Cortex-MではSVCにも割り込み優先度があるが、PRIMASKを設定すると
  SVC呼び出しがエラーとなりHardFaultに落ちてしまうから。
  これは、PRIMASKを割り込み許可/禁止として使用する場合に、割り込み禁止時に
  システムコールを発行するのが難しくなる。

・Tickタイマについて。Cortex-MのSysTickは32ビットカウンタであり、現在のBWOSで
　採用している64ビットticklessタイマに適用するのが難しい。だが、既存のように
  1ms毎にタイマ割り込みが発生してしまうシステムにはしたくない。

・Cortex-M4Fが搭載しているFPUについては当分は未サポートとする。
