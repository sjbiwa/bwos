○Exception/dispatchでのスタック状態考察

ARMv8-Aでは、SPを使ってメモリアクセスを行う場合は、"SP"が16バイトアラインメント
されていなければならない。なので、SPは常に16バイトアラインメントされた値となる。
(※実際にはAPCS的にはメモリアクセスしなければアラインメントされている必要はないと
思われるが、おそらくそのようには使われない)
このため、少なくともSP_EL1については常に16バイトアラインメントになっていることを
保証しなければならない。

EL1ではSP_EL0はアクセスしないので保存する必要はない。
SP_EL0を保存するのはdispatchの時のみ

Exception時(IRQ/SVC)にR0-R18/R30, ELR_EL1/SPSR_EL1をスタックに退避する。
現在のFPU設定をスタックに退避(CPACR)
FPU無効化(CPACR)

SYSTEMスタック (24DWORD)
         ------------
S_SP  -> | CPACR     |
         ------------
         | DUMMY     |
         ------------
         | ELR_EL1   |
         ------------
         | SPSR_EL1  |
         ------------
         | R0-18/30  |
         ------------
prevSP


割り込みスタック (1回目 2DWORD  2回目以降 22DWORD)
             ------------
3回目SP ->   | ELR_EL1   |
             ------------
             | SPSR_EL1  |
             ------------
             | R0-18/30  |
             ------------
2回目SP ->   | ELR_EL1   |
             ------------
             | SPSR_EL1  |
             ------------
             | R0-18/30  |
             ------------
1回目SP ->   | S_SP      |
             ------------
             | DUMMY     |
             ------------

・１回目の割り込み時
   - 現タスクのSYSTEMスタックにレジスタ退避
   - スタック(SP_EL1)を割り込み用スタックに切り替え
   - SYSTEMスタック値を割り込み用スタックに退避 (16byte-alignにする)
    ※ここまでくれば再度割り込み許可可能
・２回目の割り込み時
   - 現スタック(割り込みスタック)にレジスタ退避
    ※ここまでくれば再度割り込み許可可能
・３回目以降は上記と同様

------------------------------------------------------------------
タスクコンテキスト (上部 14DWORD  下部 24DWORD  合計38DWORD)
         ------------
SP->     | R19-29    |
         ------------
         | SP_EL0    | ※Systemタスクでは 0
         ------------
         | ret-stub  | <- 戻りアドレス IRQ(entry)/stubへ
         ------------     ※API内部からの呼び出し時はRETで復帰
         | DUMMY     |
-------------------------------------
         | CPACR     |   ↓以下はIRQ(entry)時のみ
         ------------
         | DUMMY     |
         ------------
         | ELR_EL1   |
         ------------
         | SPSR_EL1  |
         ------------
         | R0-18/30  |
         ------------  ※IRQ(entry)時はERETで復帰(起動)
prevSP

------------------------------------------------------------------
SVCコール
EL0->EL1ならEL1の初期値がSP
EL1->EL1ならSVCコール前のSPがそのままSP
つまり必ず16バイトアラインメントになっている。

           (4DWORD)
         ------------
SP->     | ELR_EL1   |
         ------------
         | SPSR_EL1  |
         ------------
         |   R29     |
         ------------
         |   R30     |
         ------------
スタックに保存後にDAIFをSVC呼び出し前の状態に戻す。

SVCハンドラ内ではR0-R7が引数。R8-R18は破壊しても良い。
なので、R8-R18をワークレジスタとして使う。

